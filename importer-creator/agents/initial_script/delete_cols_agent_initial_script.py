import sys
import subprocess
import json
import pandas as pd
from state.agent_state import AgentState
from utils.create_prompt import create_prompt
from utils.agent_factory import AgentFactory
from context.mappings.mappings_white_list import white_list_mapping
from utils.create_descriptive_stats_prompt import create_descriptive_stats_prompt
from utils.file_paths_updater import update_file_paths
from utils.path_helper import get_run_path, ensure_path_exists
from utils.gemini_mitigation import invoke_with_retry


def delete_cols_agent_initial_script(
    state: AgentState,
):
    """
    This agent is responsible for deleting unneccesary columns.

    Inputs:
        Input path to the csv file created by the prior agent.
        The dataframe loaded from the input path.
        White list of columns that cannot be deleted.
        The python script generated by the prior agent.
    """
    print("\nDELETE COLUMNS AGENT INITIAL SCRIPT\n")
    
    # Debug: Check if run_dir is in state
    run_dir = state.get("run_dir")
    print(f"DEBUG: run_dir in state: {run_dir}")
    print(f"DEBUG: full state keys: {list(state.keys())}")

    # Load the previously created formatted csv file into a pandas dataframe
    input_path_csv = get_run_path(state, "initial_script/steps/1_initially.csv")
    input_path_script = get_run_path(state, "initial_script/steps/1_initially.py")
    
    print(f"DEBUG: Resolved input_path_csv: {input_path_csv}")
    print(f"DEBUG: Resolved input_path_script: {input_path_script}")

    # Load the dataframe and the script
    df = pd.read_csv(input_path_csv, encoding="utf-8", sep=",", decimal=".")

    # Get pre-initialized agents from the AgentFactory
    verbose = state.get("verbose", False)
    structured_output_agent = AgentFactory.get_structured_output_agent(verbose)
    agent = AgentFactory.get_coding_agent(df, verbose)

    descriptive_statistics = create_descriptive_stats_prompt(df)

    # Load the script
    with open(input_path_script, "r", encoding="utf-8") as file:
        script = file.read()

    # Define the output paths
    output_path_csv = get_run_path(state, "initial_script/steps/2_deleted_columns.csv")
    output_path_script = get_run_path(state, "initial_script/steps/2_deleted_columns.py")
    output_path_markdown = get_run_path(state, "initial_script/steps/2_deleted_columns.md")
    
    # Ensure output directories exist
    ensure_path_exists(output_path_csv)
    ensure_path_exists(output_path_script)
    ensure_path_exists(output_path_markdown)

    # Create the prompt
    task = """
Your task is to inspect the dataframe 'df' and to retain all necessary columns based on the provided information in <white_list> tags below. You will also create a runnable python script.

Inputs:
- <input_path>: The path to the .csv file created by the prior agent.
- df: The dataframe loaded from this .csv file.
- <white_list>: A whitelist containing necessary columns that cannot be deleted. For each column name, inspect the description and the examples and use them as reference for deciding on which columns to keep.
- <prior_script>: The Python script created by the prior agent.
"""

    completion_steps = f"""
a. Inspect the .csv file provided under <input_path> tags below. The dataframe 'df' you are provided with is the result of running the python script under <prior_script> tags below on this input .csv file.
    - When using the Python REPL tool you are provided with, load the .csv file into a pandas dataframe 'df' using the path provided under <input_path> tags and 'df = pd.read_csv(input_path, encoding="utf-8", sep=",")'. **DO NOT** add this code to the python script you are creating.
    - **NEVER** load the .csv file saved in the 'original_path' variable inside the script under <prior_script> tags.  
b. Inspect the white list under <white_list> tags which contains necessary columns to be retained in the dataset.
c. Output a list of columns that can be deleted. Columns that can be deleted are columns which are not referred to in the the whitelist provided under <white_list> tags and empty columns.
d. Inspect the provided python script under <prior_script> tags.
e. Update the provided python script in <prior_script> tags below. This python script must contain the following:
    1. the original code of the prior script provided in the <prior_script> tags **WITHOUT** any changes to the exisiting code. 
    2. delete all columns that were identified to be deleted in the prior step. **ENSURE** to not attempt to delete the same column twice e.g. because it is not inside the white list and it is empty, as this will cause an error. 
    3. Insert the new code at the bottom of the script and before the final output to csv, to keep the chronological order of the script.
    4. **ONLY** insert the new code and **NEVER** overwrite or change the existing code. **NEVER** change the variable 'original_path'.
    
    IMPORTANT: 
    - **DO NOT** load the .csv file saved in the 'original_path' variable inside the script under <prior_script> tags below. You only work with the dataframe 'df' you are already provided with.
    - The code must contain python comments explaining the code.
    - The code must be executable and must not contain any code errors.
    - The new script must contain all the content of the initial script in addition to the added data. 
"""

    answer_format = """
Your output must be provided in JSON format. Provide all detailed reasoning in a structured and human readable way (e.g. using sub headers, bulletpoints and numbered lists) and the pure executable Python code in the following JSON format:
{
    "reasoning": "Your detailed reasoning here...",
    "code": "Your pure executable Python code here..."
}
Ensure that the output is valid JSON and does not include any additional commentary or explanation. Do not surround the JSON output with any code block markers or tags like ```json```.
"""

    additional_information = f"""
<additional_information>
<input_path>
{input_path_csv}
</input_path>
<white_list>
{json.dumps(white_list_mapping, indent=4)}
</white_list>
<prior_script>
```python
{script}
```
</prior_script>
</additional_information>
"""

    prompt = create_prompt(
        task, completion_steps, answer_format, additional_information
    )

    # Invoke summary agent with custom prompt
    full_prompt = descriptive_statistics + prompt
    response = invoke_with_retry(agent, full_prompt)
    response_output = response.get("output")

    # Invoke the new structured output agent with the parsing task
    structured_output = invoke_with_retry(structured_output_agent, response_output)

    ### Code below for extracting the code from the agent's response and running it - creating the csv file ###
    # Function to parse the JSON response from the agent
    def parse_agent_response(response):
        try:
            # Load the pydantic object into JSON
            response_json = response.json()
            # Load the JSON into a dictionary
            response_dict = json.loads(response_json)
            reasoning = response_dict.get("reasoning", "").strip()
            code = response_dict.get("code", "").strip()
            return {"reasoning": reasoning, "code": code}
        except json.JSONDecodeError as e:
            print(f"JSON decoding failed: {e}")
            sys.exit(1)

    # Parse the agent's response
    output = parse_agent_response(structured_output)

    # Save the reasoning to a Markdown file
    if output.get("reasoning"):
        with open(output_path_markdown, "w", encoding="utf-8") as markdown_file:
            markdown_file.write(f"# Reasoning\n\n{output['reasoning']}")
    else:
        print("No reasoning was found in the agent's response.")
        sys.exit(1)

    if output.get("code"):
        print("Update file paths...")
        # Update the generated code to replace the file paths dynamically
        updated_code = update_file_paths(
            output["code"], state.get("full_path"), output_path_csv
        )

        print("Create the script...")
        # Save the generated code to a Python file
        with open(output_path_script, "w", encoding="utf-8") as script_file:
            script_file.write(updated_code)

        # Run the generated Python script
        print("Attempting to run the generated script...")
        try:
            result = subprocess.run([sys.executable, output_path_script], check=True)
            print("The generated script was executed successfully.")
        except subprocess.CalledProcessError as e:
            print(f"An error occurred while executing the script: {e}")
            sys.exit(1)
    else:
        print("No Python code was found in the agent's response.")
        sys.exit(1)
    
    # Return the state to pass to next agent
    return state
